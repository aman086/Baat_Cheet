// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String   @unique
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestSent FollowRequest[] @relation("FollowRequestSent")
  followRequestReceived FollowRequest[] @relation("FollowRequestReceived")
  blocksSent Block[] @relation("BlockSent")
  blocksReceived Block[] @relation("BlockReceived")
  stories Story[]
}

model Post{
  // id String @id @map("_id") @default(auto()) @db.ObjectId
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id] , onDelete : Cascade)
  userId String @db.ObjectId
  comments Comment[]
  likes Like[]
}

model Comment{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  user User @relation(fields: [userId] , references: [id] , onDelete : Cascade)
  userId String @db.ObjectId
  post Post @relation(fields: [postId] , references: [id] , onDelete : Cascade)
  postId String @db.ObjectId
  likes Like[]
}

model Like{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  createdAt DateTime @default(now())
  commentId String? @db.ObjectId
  comment Comment? @relation(fields: [commentId] , references: [id] , onDelete : Cascade)
  userId String @db.ObjectId
  user User @relation(fields: [userId] , references: [id] , onDelete : Cascade)
  post Post? @relation(fields: [postId] , references: [id] , onDelete : Cascade)
  postId String @db.ObjectId
}

model Follower{
  id String @id  @map("_id") @db.ObjectId @default(auto())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers" , fields: [followerId] , references: [id] , onDelete: Cascade)
  followerId String @db.ObjectId
  following User @relation("UserFollowings" , fields: [followingId] , references: [id] , onDelete: Cascade)
  followingId String @db.ObjectId
}

model FollowRequest{
  id String @id  @map("_id") @db.ObjectId @default(auto())
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestSent" , fields: [senderId] , references: [id] , onDelete: Cascade)
  senderId String @db.ObjectId
  receiver User @relation("FollowRequestReceived" , fields: [receiverId] , references: [id] , onDelete: Cascade)
  receiverId String @db.ObjectId
  @@unique([senderId , receiverId])
}

model Block{
  id String @id  @map("_id") @db.ObjectId @default(auto())
  createdAt DateTime @default(now())
  blocker User @relation("BlockSent" , fields: [blockerId] , references: [id] , onDelete: Cascade)
  blockerId String @db.ObjectId
  blocked User @relation("BlockReceived" , fields: [blockedId] , references: [id] , onDelete: Cascade)
  blockedId String @db.ObjectId

  @@unique([blockerId , blockedId])
}

model Story{
  id String @id  @map("_id") @db.ObjectId @default(auto())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userId] , references: [id] , onDelete : Cascade)
  userId String @unique @db.ObjectId
}